-- =====================
-- Table: alembic_version
-- =====================
CREATE TABLE public.alembic_version (
    version_num VARCHAR(32) NOT NULL,
    PRIMARY KEY (version_num)
);

-- =====================
-- Table: slide_extractions
-- =====================
CREATE TABLE public.slide_extractions (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    filename VARCHAR NOT NULL,
    slides JSONB NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    slides_key TEXT,
    detected_topic TEXT,
    detected_subtopics JSONB
);

-- =====================
-- Table: profiles
-- =====================
CREATE TABLE public.profiles (
    id INT NOT NULL,
    supabase_id UUID NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    full_name VARCHAR(255),
    avatar_url VARCHAR(500),
    phone VARCHAR(50),
    bio TEXT,
    role VARCHAR(50) NOT NULL DEFAULT 'student',
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_superuser BOOLEAN NOT NULL DEFAULT FALSE,
    email_verified BOOLEAN NOT NULL DEFAULT FALSE,
    last_sign_in TIMESTAMPTZ,
    user_metadata JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    PRIMARY KEY (id),
    UNIQUE (supabase_id)
);

-- =====================
-- Table: code_submissions
-- =====================
CREATE TABLE public.code_submissions (
    id UUID PRIMARY KEY,
    user_id INT NOT NULL,
    source_code TEXT NOT NULL,
    language_id INT NOT NULL,
    stdin TEXT,
    expected_output TEXT,
    judge0_token VARCHAR(255),
    status VARCHAR(50) NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    completed_at TIMESTAMPTZ
);

-- =====================
-- Table: code_results
-- =====================
CREATE TABLE public.code_results (
    id UUID PRIMARY KEY,
    submission_id UUID NOT NULL,
    stdout TEXT,
    stderr TEXT,
    compile_output TEXT,
    execution_time VARCHAR(50),
    memory_used INT,
    status_id INT NOT NULL,
    status_description VARCHAR(255) NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- =====================
-- Table: challenges
-- =====================
CREATE TABLE public.challenges (
    id UUID PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    lecturer_creator INT NOT NULL,
    linked_module VARCHAR(255),
    duration INT,
    tier challengetier NOT NULL DEFAULT 'plain',
    mark INT,
    badge_rule TEXT,
    slug VARCHAR,
    kind challengekind,
    status challengestatus,
    topic_id INT
);

-- =====================
-- Table: questions
-- =====================
CREATE TABLE public.questions (
    id UUID PRIMARY KEY,
    challenge_id UUID NOT NULL,
    language_id INT NOT NULL,
    expected_output TEXT,
    points INT NOT NULL,
    starter_code TEXT,
    max_time_ms INT,
    max_memory_kb INT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    tier questiontier NOT NULL DEFAULT 'bronze',
    valid BOOLEAN NOT NULL DEFAULT FALSE
);

-- =====================
-- Table: question_attempts
-- =====================
CREATE TABLE public.question_attempts (
    id UUID PRIMARY KEY,
    question_id UUID NOT NULL,
    challenge_id UUID NOT NULL,
    user_id INT NOT NULL,
    judge0_token VARCHAR(255),
    source_code TEXT NOT NULL,
    stdout TEXT,
    stderr TEXT,
    status_id INT NOT NULL,
    status_description VARCHAR(255) NOT NULL,
    time VARCHAR(50),
    memory INT,
    is_correct BOOLEAN NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    code_hash VARCHAR(64),
    idempotency_key VARCHAR(100),
    latest BOOLEAN NOT NULL
);

-- =====================
-- Table: challenge_attempts
-- =====================
CREATE TABLE public.challenge_attempts (
    id UUID PRIMARY KEY,
    challenge_id UUID NOT NULL,
    user_id INT NOT NULL,
    score INT NOT NULL,
    total_correct INT NOT NULL,
    completed_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- =====================
-- Table: question_tests
-- =====================
CREATE TABLE public.question_tests (
    id UUID PRIMARY KEY,
    question_id UUID NOT NULL,
    input TEXT NOT NULL,
    expected TEXT NOT NULL,
    visibility TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- =====================
-- Table: topic
-- =====================
CREATE TABLE public.topic (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    week INT NOT NULL,
    slug VARCHAR NOT NULL,
    title TEXT NOT NULL UNIQUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    subtopics JSONB,
    slides_key TEXT,
    detected_topic TEXT,
    detected_subtopics JSONB,
    slide_extraction_id INT
);

-- =====================
-- Table: user_progress
-- =====================
CREATE TABLE public.user_progress (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id INT NOT NULL,
    challenge_id UUID NOT NULL,
    questions_total INT NOT NULL DEFAULT 0,
    questions_passed INT NOT NULL DEFAULT 0,
    best_score INT NOT NULL DEFAULT 0,
    last_submission_at TIMESTAMPTZ,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE (user_id, challenge_id)
);

-- =====================
-- Table: user_elo
-- =====================
CREATE TABLE public.user_elo (
    user_id INT PRIMARY KEY,
    elo INT NOT NULL DEFAULT 1000,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- =====================
-- Table: user_title
-- =====================
CREATE TABLE public.user_title (
    user_id INT PRIMARY KEY,
    title TEXT NOT NULL DEFAULT 'Novice',
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- =====================
-- Table: user_badge
-- =====================
CREATE TABLE public.user_badge (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id INT NOT NULL,
    challenge_id UUID NOT NULL,
    tier TEXT NOT NULL,
    awarded_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE (user_id, challenge_id)
);

-- =====================
-- Indexes
-- =====================
CREATE INDEX ix_slide_extractions_id ON slide_extractions(id);
CREATE INDEX ix_code_submissions_user_id ON code_submissions(user_id);
CREATE INDEX ix_code_submissions_judge0_token ON code_submissions(judge0_token);
CREATE INDEX ix_code_results_submission_id ON code_results(submission_id);
CREATE INDEX ix_challenges_tier ON challenges(tier);
CREATE INDEX ix_challenges_slug ON challenges(slug);
CREATE INDEX ix_profiles_email ON profiles(email);
CREATE INDEX ix_profiles_role ON profiles(role);
CREATE INDEX ix_profiles_supabase_id ON profiles(supabase_id);
CREATE INDEX ix_topic_slug ON topic(slug);
CREATE INDEX ix_topic_week ON topic(week);
CREATE INDEX ix_question_tests_question_id ON question_tests(question_id);
CREATE INDEX ix_question_tests_visibility ON question_tests(visibility);
CREATE INDEX ix_user_progress_user ON user_progress(user_id);
CREATE INDEX ix_user_progress_challenge ON user_progress(challenge_id);
CREATE INDEX profiles_email_idx ON profiles(email);
CREATE INDEX profiles_active_idx ON profiles(is_active);
